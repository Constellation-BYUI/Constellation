// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210121071332_Constellation")]
    partial class Constellation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interests")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("LookingFor")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("API.Entities.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("API.Entities.ContactLink", b =>
                {
                    b.Property<int>("ContactLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactLinkLabel")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactLinkUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactLinkID");

                    b.HasIndex("UsersId");

                    b.ToTable("ContactLink");
                });

            modelBuilder.Entity("API.Entities.Discipline", b =>
                {
                    b.Property<int>("DisciplineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisciplineName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("DisciplineID");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("API.Entities.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("API.Entities.IntrestedCandidate", b =>
                {
                    b.Property<int>("IntrestedCandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("IntrestedCandidateID");

                    b.HasIndex("PostingID");

                    b.HasIndex("UserID");

                    b.ToTable("IntrestedCandidate");
                });

            modelBuilder.Entity("API.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("API.Entities.Posting", b =>
                {
                    b.Property<int>("PostingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HidePosting")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostingFor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostingOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostingTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SharableToTeam")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostingID");

                    b.HasIndex("PostingOwnerId");

                    b.ToTable("Posting");
                });

            modelBuilder.Entity("API.Entities.PostingSkills", b =>
                {
                    b.Property<int>("SkillID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillID", "PostingID");

                    b.HasIndex("PostingID");

                    b.ToTable("PostingSkills");
                });

            modelBuilder.Entity("API.Entities.PostingType", b =>
                {
                    b.Property<int>("PostingTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostingTypeName")
                        .HasColumnType("TEXT");

                    b.HasKey("PostingTypeID");

                    b.ToTable("PostingType");
                });

            modelBuilder.Entity("API.Entities.Posting_PostingType", b =>
                {
                    b.Property<int>("Posting_PostingTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Assigned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostingTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Posting_PostingTypeID");

                    b.HasIndex("PostingID");

                    b.HasIndex("PostingTypeID");

                    b.ToTable("Posting_PostingType");
                });

            modelBuilder.Entity("API.Entities.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("API.Entities.ProjectLink", b =>
                {
                    b.Property<int>("ProjectLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectLinkLabel")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectLinkUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectsProjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectLinkID");

                    b.HasIndex("ProjectsProjectID");

                    b.ToTable("ProjectLink");
                });

            modelBuilder.Entity("API.Entities.ProjectPosting", b =>
                {
                    b.Property<int>("ProjectPostingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectPostingID");

                    b.HasIndex("PostingID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectPosting");
                });

            modelBuilder.Entity("API.Entities.ProjectSkills", b =>
                {
                    b.Property<int>("SkillID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("API.Entities.RecruiterPicks", b =>
                {
                    b.Property<int>("RecuiterPicksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecuiterID")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecuiterPicksID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("PostingID");

                    b.HasIndex("RecuiterID");

                    b.ToTable("RecruiterPicks");
                });

            modelBuilder.Entity("API.Entities.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillName")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillID");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("API.Entities.SkillDiscipline", b =>
                {
                    b.Property<int>("DisciplineID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DisciplineID", "SkillID");

                    b.HasIndex("SkillID");

                    b.ToTable("SkillDiscipline");
                });

            modelBuilder.Entity("API.Entities.SkillLink", b =>
                {
                    b.Property<int>("SkillLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkilLinkLabel")
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillLinkOwner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillLinkUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillLinkID");

                    b.ToTable("SkillLink");
                });

            modelBuilder.Entity("API.Entities.StarredPosting", b =>
                {
                    b.Property<int>("StarredPostingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("StarredPostingID");

                    b.HasIndex("PostingID");

                    b.HasIndex("UserID");

                    b.ToTable("StarredPosting");
                });

            modelBuilder.Entity("API.Entities.StarredProject", b =>
                {
                    b.Property<int>("StarredProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("StarredProjectID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("StarredProject");
                });

            modelBuilder.Entity("API.Entities.StarredUser", b =>
                {
                    b.Property<int>("StarredUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StarredOwnerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserStarredID")
                        .HasColumnType("INTEGER");

                    b.HasKey("StarredUserID");

                    b.HasIndex("StarredOwnerID");

                    b.HasIndex("UserStarredID");

                    b.ToTable("StarredUser");
                });

            modelBuilder.Entity("API.Entities.UserLike", b =>
                {
                    b.Property<int>("SourceUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LikedUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SourceUserId", "LikedUserId");

                    b.HasIndex("LikedUserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("API.Entities.UserProject", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CollaborationTitle")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("API.Entities.UserSkill", b =>
                {
                    b.Property<int>("UserSkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserSkillID");

                    b.HasIndex("SkillID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSkill");
                });

            modelBuilder.Entity("API.Entities.UserSkillLink", b =>
                {
                    b.Property<int>("UserSkillLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserSkillID")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserSkillLinkID");

                    b.HasIndex("LinkID");

                    b.HasIndex("UserSkillID");

                    b.ToTable("UserSkillLink");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.HasOne("API.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Connection", b =>
                {
                    b.HasOne("API.Entities.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Entities.ContactLink", b =>
                {
                    b.HasOne("API.Entities.AppUser", "Users")
                        .WithMany("ContactLinks")
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Entities.IntrestedCandidate", b =>
                {
                    b.HasOne("API.Entities.Posting", "Posting")
                        .WithMany("IntrestedCandidates")
                        .HasForeignKey("PostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("IntrestedCandidates")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Message", b =>
                {
                    b.HasOne("API.Entities.AppUser", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Entities.Posting", b =>
                {
                    b.HasOne("API.Entities.AppUser", "PostingOwner")
                        .WithMany("Postings")
                        .HasForeignKey("PostingOwnerId");

                    b.Navigation("PostingOwner");
                });

            modelBuilder.Entity("API.Entities.PostingSkills", b =>
                {
                    b.HasOne("API.Entities.Posting", "Posting")
                        .WithMany("PostingSkills")
                        .HasForeignKey("PostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Skill", "Skill")
                        .WithMany("PostingSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posting");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("API.Entities.Posting_PostingType", b =>
                {
                    b.HasOne("API.Entities.Posting", "Postings")
                        .WithMany("Posting_PostingTypes")
                        .HasForeignKey("PostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.PostingType", "PostingTypes")
                        .WithMany("Posting_PostingTypes")
                        .HasForeignKey("PostingTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postings");

                    b.Navigation("PostingTypes");
                });

            modelBuilder.Entity("API.Entities.ProjectLink", b =>
                {
                    b.HasOne("API.Entities.Project", "Projects")
                        .WithMany("ProjectLinks")
                        .HasForeignKey("ProjectsProjectID");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("API.Entities.ProjectPosting", b =>
                {
                    b.HasOne("API.Entities.Posting", "Posting")
                        .WithMany("ProjectPostings")
                        .HasForeignKey("PostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Project", "Project")
                        .WithMany("ProjectPostings")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posting");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("API.Entities.ProjectSkills", b =>
                {
                    b.HasOne("API.Entities.Project", "Project")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Skill", "Skill")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("API.Entities.RecruiterPicks", b =>
                {
                    b.HasOne("API.Entities.AppUser", "Candidate")
                        .WithMany("Candidates")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Posting", "Posting")
                        .WithMany("RecruiterPicks")
                        .HasForeignKey("PostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Recuiter")
                        .WithMany("Recuiter")
                        .HasForeignKey("RecuiterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Posting");

                    b.Navigation("Recuiter");
                });

            modelBuilder.Entity("API.Entities.SkillDiscipline", b =>
                {
                    b.HasOne("API.Entities.Discipline", "Disciplines")
                        .WithMany("SkillDiscipline")
                        .HasForeignKey("DisciplineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Skill", "Skills")
                        .WithMany("SkillDisciplines")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplines");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("API.Entities.StarredPosting", b =>
                {
                    b.HasOne("API.Entities.Posting", "Posting")
                        .WithMany("StarredPostings")
                        .HasForeignKey("PostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("StarredPostings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.StarredProject", b =>
                {
                    b.HasOne("API.Entities.Project", "Project")
                        .WithMany("StarredProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("StarredProjects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.StarredUser", b =>
                {
                    b.HasOne("API.Entities.AppUser", "StarOwner")
                        .WithMany("StarredOwner")
                        .HasForeignKey("StarredOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "StarredPerson")
                        .WithMany("StarredUsers")
                        .HasForeignKey("UserStarredID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StarOwner");

                    b.Navigation("StarredPerson");
                });

            modelBuilder.Entity("API.Entities.UserLike", b =>
                {
                    b.HasOne("API.Entities.AppUser", "LikedUser")
                        .WithMany("LikedByUsers")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "SourceUser")
                        .WithMany("LikedUsers")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikedUser");

                    b.Navigation("SourceUser");
                });

            modelBuilder.Entity("API.Entities.UserProject", b =>
                {
                    b.HasOne("API.Entities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.UserSkill", b =>
                {
                    b.HasOne("API.Entities.Skill", "Skills")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Users")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skills");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Entities.UserSkillLink", b =>
                {
                    b.HasOne("API.Entities.SkillLink", "SkillLinks")
                        .WithMany("UserSkillLinks")
                        .HasForeignKey("LinkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.UserSkill", "UserSkills")
                        .WithMany("UserSkillLinks")
                        .HasForeignKey("UserSkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillLinks");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("API.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("ContactLinks");

                    b.Navigation("IntrestedCandidates");

                    b.Navigation("LikedByUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Photos");

                    b.Navigation("Postings");

                    b.Navigation("Recuiter");

                    b.Navigation("StarredOwner");

                    b.Navigation("StarredPostings");

                    b.Navigation("StarredProjects");

                    b.Navigation("StarredUsers");

                    b.Navigation("UserProjects");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("API.Entities.Discipline", b =>
                {
                    b.Navigation("SkillDiscipline");
                });

            modelBuilder.Entity("API.Entities.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("API.Entities.Posting", b =>
                {
                    b.Navigation("IntrestedCandidates");

                    b.Navigation("Posting_PostingTypes");

                    b.Navigation("PostingSkills");

                    b.Navigation("ProjectPostings");

                    b.Navigation("RecruiterPicks");

                    b.Navigation("StarredPostings");
                });

            modelBuilder.Entity("API.Entities.PostingType", b =>
                {
                    b.Navigation("Posting_PostingTypes");
                });

            modelBuilder.Entity("API.Entities.Project", b =>
                {
                    b.Navigation("ProjectLinks");

                    b.Navigation("ProjectPostings");

                    b.Navigation("ProjectSkills");

                    b.Navigation("StarredProjects");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("API.Entities.Skill", b =>
                {
                    b.Navigation("PostingSkills");

                    b.Navigation("ProjectSkills");

                    b.Navigation("SkillDisciplines");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("API.Entities.SkillLink", b =>
                {
                    b.Navigation("UserSkillLinks");
                });

            modelBuilder.Entity("API.Entities.UserSkill", b =>
                {
                    b.Navigation("UserSkillLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
